init:
	mvi c, 10			; Размер входного  массива
	mvi e, 00			; Размер выходного массива
	lxi h, 0900			; Базовый адрес входного массива
	jmp start_element	
start_element:
	mov b, m			; Перенести элемент массива в регистр b
	mvi d, 00			; Обнулить регистр d
count_ones:
	mov a, b			; Перенести значение регистра b в регистр a
	ani 01				; Проверить, стоит ли в младшем разряде единица
	jz shift_element	; Если в младшем разряде не единица
	inr d				; Увеличить регистр d
	mvi a, 04			; Записать в регистр a 04
	cmp d				; Сравнить регистры a и d
	jz push_to_array	; Если равны, то добавть в выходной массив
shift_element:
	mov a, b			; Перенести значение регистра b в регистр a
	rar					; Сдвинуть значение регистра a вправо
	mov b, a			; Перенести значение регистра a в регистр b
	mvi a, 00			; Записать в регистр a 00
	cmp b				; Сравнить регистры a и b
	jnz count_ones		; Если не равны, то продолжить подсчёт единиц
next_element:
	inr l				; Инкрементировать регистр l
	dcr c				; Декрементировать регистр c
	jnz start_element	; Если регистр c не достиг нуля, то продолжить проверку элементов
	hlt					; Завершить работу
push_to_array:
	mov b, m			; Записать элемент массива в регистр b
	mvi h, 0A			; Переместить указатель базового адреса массива на базовый адрес выходного массива
	mov d, l			; Перенести значение регистра l в регистр d
	mov l, e			; Перенести значение регистра e в регистр l
	mov m, b			; Перенести значение регистра b в массива
	inr e				; Инкрементировать количество элементов выходного массив
	mov l, d			; Перенести значение регистра d в регистр l
	mvi h, 09			; Переместить указатель базового адреса массива на базовый адрес входного массива
	jmp next_element	; Перейти к следующему элементу